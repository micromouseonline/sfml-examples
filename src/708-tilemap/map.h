#pragma once
#include <SFML/Graphics.hpp>
// define the level_map with an array of tile indices
// clang-format off
    const int level_map[32*32] =
    {
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x01, 0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,  0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00,  0x00, 0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02,  0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x01, 0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,  0x01, 0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,  0x01, 0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02,  0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,  0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,  0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
        
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,  0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,  0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
        
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,  0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,  0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,

    };

const int japan2007[] = {
    0x0E, 0x08, 0x0A, 0x09, 0x0C, 0x09, 0x0C, 0x09, 0x0C, 0x0A, 0x0A, 0x09, 0x0D, 0x0C, 0x0A, 0x09, 0x0C, 0x02, 0x09, 0x06, 0x03, 0x06, 0x03, 0x06, 0x01, 0x0C,
    0x0A, 0x03, 0x04, 0x02, 0x09, 0x05, 0x06, 0x08, 0x02, 0x08, 0x0B, 0x0C, 0x0A, 0x0A, 0x03, 0x06, 0x0A, 0x0A, 0x03, 0x0C, 0x03, 0x05, 0x0C, 0x02, 0x09, 0x06,
    0x0A, 0x03, 0x0C, 0x0A, 0x0A, 0x0A, 0x0A, 0x08, 0x0B, 0x06, 0x09, 0x05, 0x04, 0x0A, 0x00, 0x0B, 0x0E, 0x08, 0x03, 0x0C, 0x0A, 0x09, 0x0E, 0x00, 0x0B, 0x0C,
    0x03, 0x05, 0x04, 0x0A, 0x00, 0x0B, 0x0C, 0x01, 0x0E, 0x02, 0x09, 0x05, 0x0E, 0x00, 0x0B, 0x06, 0x09, 0x05, 0x04, 0x0A, 0x00, 0x0B, 0x05, 0x04, 0x08, 0x0A,
    0x03, 0x05, 0x0C, 0x03, 0x0C, 0x09, 0x05, 0x05, 0x05, 0x0C, 0x03, 0x0C, 0x03, 0x05, 0x07, 0x0C, 0x09, 0x05, 0x06, 0x0A, 0x03, 0x05, 0x05, 0x05, 0x04, 0x02,
    0x0A, 0x03, 0x0E, 0x00, 0x0B, 0x04, 0x03, 0x06, 0x0A, 0x0A, 0x09, 0x05, 0x05, 0x05, 0x06, 0x0A, 0x0A, 0x0A, 0x0A, 0x03, 0x0C, 0x00, 0x0B, 0x0C, 0x0A, 0x0A,
    0x03, 0x05, 0x05, 0x05, 0x0C, 0x09, 0x0C, 0x0A, 0x0A, 0x0A, 0x03, 0x04, 0x0B, 0x06, 0x0A, 0x0A, 0x08, 0x03, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0C, 0x08, 0x0A,
    0x0A, 0x02, 0x0B, 0x0C, 0x0A, 0x09, 0x06, 0x09, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x0A, 0x0A, 0x0A, 0x09, 0x06, 0x09, 0x06, 0x09, 0x06, 0x01, 0x05,
    0x05, 0x05, 0x05, 0x05, 0x0C, 0x09, 0x0C, 0x09, 0x06, 0x09, 0x06, 0x09, 0x06, 0x09, 0x05, 0x05, 0x05, 0x06, 0x03, 0x06, 0x03, 0x06, 0x03, 0x06, 0x09, 0x06,
    0x0A, 0x02, 0x0B, 0x06, 0x01, 0x05, 0x06, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x02, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x02, 0x03,
};

// clang-format on
extern int* japan2007ef_maz;
/// hhttps://www.sfml-dev.org/tutorials/2.6/graphics-view.php

class TileMap : public sf::Drawable, public sf::Transformable {
 public:
  bool load(const std::string& tileset, sf::Vector2u tileSize, const int* tiles, unsigned int width, unsigned int height) {
    // load the tileset texture
    if (!m_tileset_texture.loadFromFile(tileset)) {
      return false;
    }

    // resize the vertex array to fit the level_map size
    m_vertices.setPrimitiveType(sf::Triangles);
    m_vertices.resize(width * height * 6);
    int texture_tile_width = (m_tileset_texture.getSize().x / tileSize.x);
    int texture_tile_height = (m_tileset_texture.getSize().y / tileSize.y);

    // populate the vertex array, with two triangles per tile
    for (unsigned int y = 0; y < width; ++y) {
      for (unsigned int x = 0; x < height; ++x) {
        // get the current tile number
        int k = (y) + (x)*width;
        std::cout << k << std::endl;
        int tileNumber = tiles[k];
        if (x == 1 && y == 0) {
          tileNumber = 15;
        } else {
          tileNumber = 0;
        }
        tileNumber = y;

        // find its position in the tileset texture
        int tu = tileNumber % texture_tile_width;
        int tv = tileNumber / texture_tile_width;
        tu = tileNumber;
        tv = 0;

        // get a pointer to the triangles' vertices of the current tile
        sf::Vertex* triangles = &m_vertices[(y + x * width) * 6];

        // define the 6 corners of the two triangles
        triangles[0].position = sf::Vector2f(y * tileSize.x, x * tileSize.y);
        triangles[1].position = sf::Vector2f((y + 1) * tileSize.x, x * tileSize.y);
        triangles[2].position = sf::Vector2f(y * tileSize.x, (x + 1) * tileSize.y);
        triangles[3].position = sf::Vector2f(y * tileSize.x, (x + 1) * tileSize.y);
        triangles[4].position = sf::Vector2f((y + 1) * tileSize.x, x * tileSize.y);
        triangles[5].position = sf::Vector2f((y + 1) * tileSize.x, (x + 1) * tileSize.y);

        // define the 6 matching texture coordinates
        triangles[0].texCoords = sf::Vector2f(tu * tileSize.x, tv * tileSize.y);
        triangles[1].texCoords = sf::Vector2f((tu + 1) * tileSize.x, tv * tileSize.y);
        triangles[2].texCoords = sf::Vector2f(tu * tileSize.x, (tv + 1) * tileSize.y);
        triangles[3].texCoords = sf::Vector2f(tu * tileSize.x, (tv + 1) * tileSize.y);
        triangles[4].texCoords = sf::Vector2f((tu + 1) * tileSize.x, tv * tileSize.y);
        triangles[5].texCoords = sf::Vector2f((tu + 1) * tileSize.x, (tv + 1) * tileSize.y);
      }
    }

    return true;
  }

 private:
  virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const {
    // apply the transform
    states.transform *= getTransform();

    // apply the tileset texture
    states.texture = &m_tileset_texture;

    // draw the vertex array
    target.draw(m_vertices, states);
  }

  sf::VertexArray m_vertices;
  sf::Texture m_tileset_texture;
};