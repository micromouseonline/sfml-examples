#pragma once
#include <SFML/Graphics.hpp>
// define the level_map with an array of tile indices
// clang-format off
    const int level_map[32*32] =
    {
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x01, 0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,  0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00,  0x00, 0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02,  0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x01, 0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,  0x01, 0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,  0x01, 0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02,  0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,  0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,  0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
        
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,  0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,  0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
        
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x03,  0x03, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,  0x00, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x00,  0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,  0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x02,  0x02, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x02, 0x02,  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,

    };

const int japan2007[] = {
    0x0E, 0x08, 0x0A, 0x09, 0x0C, 0x09, 0x0C, 0x09, 0x0C, 0x0A, 0x0A, 0x09, 0x0D, 0x0C, 0x0A, 0x09, 0x0C, 0x02, 0x09, 0x06, 0x03, 0x06, 0x03, 0x06, 0x01, 0x0C,
    0x0A, 0x03, 0x04, 0x02, 0x09, 0x05, 0x06, 0x08, 0x02, 0x08, 0x0B, 0x0C, 0x0A, 0x0A, 0x03, 0x06, 0x0A, 0x0A, 0x03, 0x0C, 0x03, 0x05, 0x0C, 0x02, 0x09, 0x06,
    0x0A, 0x03, 0x0C, 0x0A, 0x0A, 0x0A, 0x0A, 0x08, 0x0B, 0x06, 0x09, 0x05, 0x04, 0x0A, 0x00, 0x0B, 0x0E, 0x08, 0x03, 0x0C, 0x0A, 0x09, 0x0E, 0x00, 0x0B, 0x0C,
    0x03, 0x05, 0x04, 0x0A, 0x00, 0x0B, 0x0C, 0x01, 0x0E, 0x02, 0x09, 0x05, 0x0E, 0x00, 0x0B, 0x06, 0x09, 0x05, 0x04, 0x0A, 0x00, 0x0B, 0x05, 0x04, 0x08, 0x0A,
    0x03, 0x05, 0x0C, 0x03, 0x0C, 0x09, 0x05, 0x05, 0x05, 0x0C, 0x03, 0x0C, 0x03, 0x05, 0x07, 0x0C, 0x09, 0x05, 0x06, 0x0A, 0x03, 0x05, 0x05, 0x05, 0x04, 0x02,
    0x0A, 0x03, 0x0E, 0x00, 0x0B, 0x04, 0x03, 0x06, 0x0A, 0x0A, 0x09, 0x05, 0x05, 0x05, 0x06, 0x0A, 0x0A, 0x0A, 0x0A, 0x03, 0x0C, 0x00, 0x0B, 0x0C, 0x0A, 0x0A,
    0x03, 0x05, 0x05, 0x05, 0x0C, 0x09, 0x0C, 0x0A, 0x0A, 0x0A, 0x03, 0x04, 0x0B, 0x06, 0x0A, 0x0A, 0x08, 0x03, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0C, 0x08, 0x0A,
    0x0A, 0x02, 0x0B, 0x0C, 0x0A, 0x09, 0x06, 0x09, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x0A, 0x0A, 0x0A, 0x09, 0x06, 0x09, 0x06, 0x09, 0x06, 0x01, 0x05,
    0x05, 0x05, 0x05, 0x05, 0x0C, 0x09, 0x0C, 0x09, 0x06, 0x09, 0x06, 0x09, 0x06, 0x09, 0x05, 0x05, 0x05, 0x06, 0x03, 0x06, 0x03, 0x06, 0x03, 0x06, 0x09, 0x06,
    0x0A, 0x02, 0x0B, 0x06, 0x01, 0x05, 0x06, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x02, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x02, 0x03,
};

// clang-format on
extern int* japan2007ef_maz;
/// hhttps://www.sfml-dev.org/tutorials/2.6/graphics-view.php

class TileMap : public sf::Drawable, public sf::Transformable {
 public:
  bool load(const std::string& tileset, sf::Vector2u tileSize, const int* tiles, unsigned int width, unsigned int height) {
    // load the tileset texture
    if (!m_tileset_texture.loadFromFile(tileset)) {
      return false;
    }

    int texture_tile_width = (m_tileset_texture.getSize().x / tileSize.x);
    int texture_tile_height = (m_tileset_texture.getSize().y / tileSize.y);

    // populate the vertex array, with two triangles per tile
    for (unsigned int x = 0; x < height; ++x) {
      for (unsigned int y = 0; y < width; ++y) {
        // get the current tile number
        int k = (y) + (x)*width;
        int tileNumber = tiles[k];
        if (x == 1 && y == 0) {
          tileNumber = 15;
        } else {
          tileNumber = 0;
        }
        tileNumber = tiles[k];
        m_map_labels[x][y].setFont(font);
        m_map_labels[x][y].setCharacterSize(15);
        m_map_labels[x][y].setString(std::to_string(10 * k));
        m_map_labels[x][y].setFillColor(sf::Color::Yellow);
        int dx = m_map_labels[x][y].getLocalBounds().width / 2;
        int dy = m_map_labels[x][y].getLocalBounds().height / 1;
        m_map_labels[x][y].setOrigin(sf::Vector2f(dx, dy));
        // m_map_labels[x][y].setOrigin(sf::Vector2f(0, 0));

        int txx = x * tileSize.x;
        int tyy = (15 - y) * tileSize.y;
        // tileNumber = x;

        // find its position in the tileset texture
        int tu = tileNumber % texture_tile_width;
        tu = tileNumber;
        m_level_map[x][y].setTexture(m_tileset_texture);
        m_level_map[x][y].setPosition(sf::Vector2f(txx * 0.3, tyy * 0.3));
        m_level_map[x][y].setScale(0.3f, 0.3f);
        m_level_map[x][y].setTextureRect(sf::IntRect(tileNumber * tileSize.x, 0, tileSize.x, tileSize.y));
        if (x == 7 && (y == 7 || y == 8)) {
          m_level_map[x][y].setColor(sf::Color::Red);
        }
        std::cout << k << " > " << m_level_map[x][y].getLocalBounds().height << std::endl;

        txx += tileSize.x / 2;
        tyy += tileSize.y / 2;
        m_map_labels[x][y].setPosition(sf::Vector2f(txx * 0.3, tyy * 0.3));
      }
    }

    return true;
  }

  void set_font(sf::Font& font) { this->font = font; }

 private:
  virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const {
    // apply the transform
    states.transform *= getTransform();

    // apply the tileset texture
    states.texture = &m_tileset_texture;

    for (int y = 0; y < 16; y++) {
      for (int x = 0; x < 16; x++) {
        target.draw(m_level_map[x][y]);
        target.draw(m_map_labels[x][y]);
      }
    }
  }

  sf::Font font;
  sf::Sprite m_level_map[16][16];
  sf::Text m_map_labels[16][16];
  sf::Texture m_tileset_texture;
};